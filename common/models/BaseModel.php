<?php
/**
 * @proterty AdminUser CreatedBy;
 */
namespace common\models;
use common\libs\Constants;
use yii\behaviors\TimestampBehavior;

class BaseModel extends \yii\db\ActiveRecord{
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
//            \yii\behaviors\BlameableBehavior::className()
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(AdminUser::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(AdminUser::className(), ['id' => 'updated_by']);
    }

    public function beforeSave($insert)
    {
        if(isset($this->status) && is_null($this->status)){
            $this->status = Constants::YesNo_Yes;
        }
        if(isset($this->active) && is_null($this->active)){
            $this->active = Constants::YesNo_Yes;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public static function createMultiple($modelClass, $multipleModels = [])
    {
        $model    = new $modelClass;
        $formName = $model->formName();
        $post     = Yii::$app->request->post($formName);
        $models   = [];

        if (!empty($multipleModels)) {
            $keys = array_keys(\yii\helpers\ArrayHelper::map($multipleModels, 'id', 'id'));
        } else {
            $keys = array_keys($post);
        }

        foreach ($keys as $i) {
            $models[] = new $modelClass;
        }

        BaseModel::loadMultiple($models, Yii::$app->request->post());

        return $models;
    }
}